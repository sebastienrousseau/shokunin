// process.rs - Processes the command-line arguments and handles project compilation
// Copyright Â© 2024 Shokunin Static Site Generator. All rights reserved.
// SPDX-License-Identifier: Apache-2.0 OR MIT

use anyhow::{anyhow, Result};
use clap::ArgMatches;
use log::{debug, info};
use ssg_core::compiler::service::compile;
use std::path::Path;

/// # Function: `args`
///
/// This function processes the command-line arguments passed to the Shokunin Static Site Generator (SSG) CLI
/// and handles the compilation of the project based on the user-provided options.
///
/// The function:
/// 1. Parses directories for the content, output, site, and templates from the `matches` object.
/// 2. Ensures that the specified directories exist or attempts to create them if necessary.
/// 3. Invokes the `compile` function to generate the static site based on the given directories.
///
/// # Arguments
///
/// - `matches`: A reference to an `ArgMatches` object containing the parsed command-line arguments. This
///   object is generated by the `clap` crate.
///
/// # Returns
///
/// - `Result<()>`: An `Ok(())` is returned if the project was successfully compiled and the output files were
///   written to the output directory. If any errors occur during directory creation or compilation, an `Err(anyhow::Error)` is returned.
///
/// # Errors
///
/// This function may return an error if:
/// - Required directories cannot be created.
/// - Required arguments are missing.
/// - The compilation process fails.
///
pub fn args(matches: &ArgMatches) -> Result<()> {
    debug!("Processing command-line arguments");

    // Parse the required directory arguments from the CLI
    let content_dir = get_arg(matches, "content")?;
    let output_dir = get_arg(matches, "output")?;
    let site_dir = get_arg(matches, "new")?;
    let template_dir = get_arg(matches, "template")?;

    // Convert the directory strings into Path objects
    let content_path = Path::new(&content_dir);
    let build_path = Path::new(&output_dir);
    let site_path = Path::new(&site_dir);
    let template_path = Path::new(&template_dir);

    // Ensure that the required directories exist or are created
    check_directory(content_path, "content")?;
    check_directory(build_path, "output")?;
    check_directory(site_path, "new")?;
    check_directory(template_path, "template")?;

    info!("Compiling project");

    // Compile the project using the specified directories
    compile(build_path, content_path, site_path, template_path)
        .map_err(|e| anyhow!("Failed to compile project: {}", e))?;

    info!("Project compiled successfully");
    Ok(())
}

/// # Function: `get_arg`
///
/// Helper function to retrieve a specific command-line argument from the `ArgMatches` object.
/// This function returns an error if the argument is not provided.
///
/// # Arguments
///
/// - `matches`: A reference to the `ArgMatches` object containing parsed command-line arguments.
/// - `name`: A string slice representing the name of the argument to retrieve.
///
/// # Returns
///
/// - `Result<String>`: Returns the value of the argument as a `String` if found, or an `Err`
///   if the argument was not provided.
///
/// # Errors
///
/// - Returns an error if the argument is missing or if there is an issue retrieving it.
fn get_arg(matches: &ArgMatches, name: &str) -> Result<String> {
    matches
        .get_one::<String>(name)
        .cloned()
        .ok_or_else(|| anyhow!("Argument '{}' not provided", name))
}

/// # Function: `check_directory`
///
/// Ensures that the specified directory exists. If the directory does not exist,
/// this function attempts to create it. If directory creation fails, an error is returned.
///
/// # Arguments
///
/// - `path`: A reference to a `Path` object representing the directory to check or create.
/// - `name`: A string slice representing the name of the directory (for error reporting).
///
/// # Returns
///
/// - `Result<()>`: Returns `Ok(())` if the directory exists or was successfully created.
///   Returns an error if directory creation fails.
///
/// # Errors
///
/// - Returns an error if the directory does not exist and cannot be created.
fn check_directory(path: &Path, name: &str) -> Result<()> {
    if !path.exists() {
        std::fs::create_dir_all(path).map_err(|e| {
            anyhow!("Failed to create {} directory: {}", name, e)
        })?;
    }
    Ok(())
}
